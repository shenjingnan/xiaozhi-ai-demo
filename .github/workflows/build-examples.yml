name: Build ESP-IDF Examples

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'examples/**'
      - '.github/workflows/build-examples.yml'
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Pull ESP-IDF Docker image
      run: docker pull espressif/idf:release-v5.4
        
    - name: Build examples (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # 设置错误时退出
        set -e
        
        # 获取所有示例目录，排除 control-led
        examples=$(find examples -maxdepth 1 -type d -name "*" | grep -v "^examples$" | grep -v "control-led" | sort)
        
        # 构建结果跟踪
        failed_builds=""
        successful_builds=""
        
        # 构建每个示例
        for example in $examples; do
          echo "=========================================="
          echo "Building $example"
          echo "=========================================="
          
          # 进入示例目录
          cd "$example"
          
          # 清理之前的构建
          rm -rf build sdkconfig || true
          
          # 执行构建
          if docker run --rm \
            -v $PWD:/project \
            -w /project \
            -u $(id -u):$(id -g) \
            -e HOME=/tmp \
            espressif/idf:release-v5.4 \
            idf.py build; then
            echo "✅ $example built successfully!"
            successful_builds="$successful_builds\n- ✅ $example"
          else
            echo "❌ $example build failed!"
            failed_builds="$failed_builds\n- ❌ $example"
          fi
          
          # 返回根目录
          cd - > /dev/null
          echo ""
        done
        
        # 生成构建摘要
        echo "## Build Summary for ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "$successful_builds" ]; then
          echo "### ✅ Successful Builds:" >> $GITHUB_STEP_SUMMARY
          echo -e "$successful_builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "$failed_builds" ]; then
          echo "### ❌ Failed Builds:" >> $GITHUB_STEP_SUMMARY
          echo -e "$failed_builds" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        
    - name: Build examples (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # 获取所有示例目录，排除 control-led
        $examples = Get-ChildItem -Path examples -Directory | Where-Object { $_.Name -ne "control-led" }
        
        $failedBuilds = @()
        $successfulBuilds = @()
        
        foreach ($example in $examples) {
          Write-Host "=========================================="
          Write-Host "Building $($example.FullName)"
          Write-Host "=========================================="
          
          # 进入示例目录
          Push-Location $example.FullName
          
          # 清理之前的构建
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path sdkconfig) { Remove-Item -Force sdkconfig }
          
          # 执行构建
          $buildResult = docker run --rm `
            -v ${PWD}:/project `
            -w /project `
            espressif/idf:release-v5.4 `
            idf.py build
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ $($example.Name) built successfully!"
            $successfulBuilds += "- ✅ $($example.Name)"
          } else {
            Write-Host "❌ $($example.Name) build failed!"
            $failedBuilds += "- ❌ $($example.Name)"
          }
          
          # 返回原目录
          Pop-Location
          Write-Host ""
        }
        
        # 生成构建摘要
        "## Build Summary for ${{ matrix.os }}" | Out-File -Append $env:GITHUB_STEP_SUMMARY
        "" | Out-File -Append $env:GITHUB_STEP_SUMMARY
        
        if ($successfulBuilds.Count -gt 0) {
          "### ✅ Successful Builds:" | Out-File -Append $env:GITHUB_STEP_SUMMARY
          $successfulBuilds | Out-File -Append $env:GITHUB_STEP_SUMMARY
          "" | Out-File -Append $env:GITHUB_STEP_SUMMARY
        }
        
        if ($failedBuilds.Count -gt 0) {
          "### ❌ Failed Builds:" | Out-File -Append $env:GITHUB_STEP_SUMMARY
          $failedBuilds | Out-File -Append $env:GITHUB_STEP_SUMMARY
          "" | Out-File -Append $env:GITHUB_STEP_SUMMARY
          exit 1
        }
        
    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: |
          examples/*/build/*.bin
          examples/*/build/*.elf
          examples/*/build/partition_table/*.bin
        if-no-files-found: warn
        retention-days: 7
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}
        path: |
          examples/*/build/log/
          examples/*/sdkconfig
        retention-days: 7